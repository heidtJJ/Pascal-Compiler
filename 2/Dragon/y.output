Terminals unused in grammar

   EQ
   NE
   LT
   LE
   GT
   GE
   PLUS
   MINUS
   OR
   STAR
   SLASH
   AND
   COMMA
   ARRAY_ACCESS
   FUNCTION_CALL
   PROCEDURE_CALL


State 89 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 $@2: %empty

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';'
   16                | PROCEDURE ID arguments ';'

   17 arguments: '(' parameter_list ')'
   18          | %empty

   19 parameter_list: identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BBEGIN optional_statements END

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: variable ASSIGNOP expression
   27          | procedure_statement
   28          | compound_statement
   29          | IF expression THEN statement ELSE statement
   30          | IF expression THEN statement
   31          | WHILE expression DO statement

   32 variable: ID
   33         | ID '[' expression ']'

   34 procedure_statement: ID
   35                    | ID '(' expression_list ')'

   36 expression_list: expression
   37                | expression_list ',' expression

   38 expression: simple_expression
   39           | simple_expression RELOP simple_expression

   40 simple_expression: term
   41                  | ADDOP term
   42                  | simple_expression ADDOP term

   43 term: factor
   44     | term MULOP factor

   45 factor: ID
   46       | ID '[' expression ']'
   47       | ID '(' expression_list ')'
   48       | INUM
   49       | RNUM
   50       | '(' expression ')'
   51       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 17 35 47 50
')' (41) 2 17 35 47 50
',' (44) 4 37
'.' (46) 2
':' (58) 5 15 19 20
';' (59) 2 5 11 15 16 20 25
'[' (91) 8 33 46
']' (93) 8 33 46
error (256)
PROGRAM (258) 2
BBEGIN (259) 21
END (260) 21
VAR (261) 5
PROCEDURE (262) 16
FUNCTION (263) 15
INTEGER (264) 9
REAL (265) 10
ARRAY (266) 8
OF (267) 8
DOTDOT (268) 8
IF (269) 29 30
THEN (270) 29 30
ELSE (271) 29
WHILE (272) 31
DO (273) 31
ASSIGNOP (274) 26
RELOP (275) 39
EQ (276)
NE (277)
LT (278)
LE (279)
GT (280)
GE (281)
ADDOP (282) 41 42
PLUS (283)
MINUS (284)
OR (285)
MULOP (286) 44
STAR (287)
SLASH (288)
AND (289)
NOT (290) 51
ID (291) 2 3 4 15 16 32 33 34 35 45 46 47
INUM (292) 8 48
RNUM (293) 49
COMMA (294)
ARRAY_ACCESS (295)
FUNCTION_CALL (296)
PROCEDURE_CALL (297)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 2, on right: 0
$@1 (53)
    on left: 1, on right: 2
identifier_list (54)
    on left: 3 4, on right: 2 4 5 19 20
declarations (55)
    on left: 5 6, on right: 2 5 13
type (56)
    on left: 7 8, on right: 5 19 20
standard_type (57)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (58)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (59)
    on left: 13, on right: 11
subprogram_head (60)
    on left: 15 16, on right: 13
$@2 (61)
    on left: 14, on right: 15
arguments (62)
    on left: 17 18, on right: 15 16
parameter_list (63)
    on left: 19 20, on right: 17 20
compound_statement (64)
    on left: 21, on right: 2 13 28
optional_statements (65)
    on left: 22 23, on right: 21
statement_list (66)
    on left: 24 25, on right: 22 25
statement (67)
    on left: 26 27 28 29 30 31, on right: 24 25 29 30 31
variable (68)
    on left: 32 33, on right: 26
procedure_statement (69)
    on left: 34 35, on right: 27
expression_list (70)
    on left: 36 37, on right: 35 37 47
expression (71)
    on left: 38 39, on right: 26 29 30 31 33 36 37 46 50
simple_expression (72)
    on left: 40 41 42, on right: 38 39 42
term (73)
    on left: 43 44, on right: 40 41 42 44
factor (74)
    on left: 45 46 47 48 49 50 51, on right: 43 44 51


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 8

    2 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    2 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 13

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


State 15

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN     shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


State 17

   21 compound_statement: BBEGIN . optional_statements END

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    ID      shift, and go to state 26

    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 27
    optional_statements  go to state 28
    statement_list       go to state 29
    statement            go to state 30
    variable             go to state 31
    procedure_statement  go to state 32


State 18

   16 subprogram_head: PROCEDURE . ID arguments ';'

    ID  shift, and go to state 33


State 19

   15 subprogram_head: FUNCTION . ID $@2 arguments ':' standard_type ';'

    ID  shift, and go to state 34


State 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 35


State 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 36


State 22

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 37


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    ARRAY    shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 24

   29 statement: IF . expression THEN statement ELSE statement
   30          | IF . expression THEN statement

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 49
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 25

   31 statement: WHILE . expression DO statement

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 53
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 26

   32 variable: ID .
   33         | ID . '[' expression ']'
   34 procedure_statement: ID .
   35                    | ID . '(' expression_list ')'

    '('  shift, and go to state 54
    '['  shift, and go to state 55

    ASSIGNOP  reduce using rule 32 (variable)
    $default  reduce using rule 34 (procedure_statement)


State 27

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 28

   21 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 56


State 29

   22 optional_statements: statement_list .
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 57

    $default  reduce using rule 22 (optional_statements)


State 30

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 31

   26 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 58


State 32

   27 statement: procedure_statement .

    $default  reduce using rule 27 (statement)


State 33

   16 subprogram_head: PROCEDURE ID . arguments ';'

    '('  shift, and go to state 59

    $default  reduce using rule 18 (arguments)

    arguments  go to state 60


State 34

   15 subprogram_head: FUNCTION ID . $@2 arguments ':' standard_type ';'

    $default  reduce using rule 14 ($@2)

    $@2  go to state 61


State 35

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 36

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 62


State 37

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 38

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 39

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


State 40

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 63


State 41

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 64


State 42

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 43

   41 simple_expression: ADDOP . term

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 48

    term    go to state 65
    factor  go to state 52


State 44

   51 factor: NOT . factor

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 48

    factor  go to state 66


State 45

   45 factor: ID .
   46       | ID . '[' expression ']'
   47       | ID . '(' expression_list ')'

    '('  shift, and go to state 67
    '['  shift, and go to state 68

    $default  reduce using rule 45 (factor)


State 46

   48 factor: INUM .

    $default  reduce using rule 48 (factor)


State 47

   49 factor: RNUM .

    $default  reduce using rule 49 (factor)


State 48

   50 factor: '(' . expression ')'

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 69
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 49

   29 statement: IF expression . THEN statement ELSE statement
   30          | IF expression . THEN statement

    THEN  shift, and go to state 70


State 50

   38 expression: simple_expression .
   39           | simple_expression . RELOP simple_expression
   42 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 71
    ADDOP  shift, and go to state 72

    $default  reduce using rule 38 (expression)


State 51

   40 simple_expression: term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 73

    $default  reduce using rule 40 (simple_expression)


State 52

   43 term: factor .

    $default  reduce using rule 43 (term)


State 53

   31 statement: WHILE expression . DO statement

    DO  shift, and go to state 74


State 54

   35 procedure_statement: ID '(' . expression_list ')'

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression_list    go to state 75
    expression         go to state 76
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 55

   33 variable: ID '[' . expression ']'

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 77
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 56

   21 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 21 (compound_statement)


State 57

   25 statement_list: statement_list ';' . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    ID      shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 78
    variable             go to state 31
    procedure_statement  go to state 32


State 58

   26 statement: variable ASSIGNOP . expression

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 79
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 59

   17 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 80
    parameter_list   go to state 81


State 60

   16 subprogram_head: PROCEDURE ID arguments . ';'

    ';'  shift, and go to state 82


State 61

   15 subprogram_head: FUNCTION ID $@2 . arguments ':' standard_type ';'

    '('  shift, and go to state 59

    $default  reduce using rule 18 (arguments)

    arguments  go to state 83


State 62

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    BBEGIN     shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 84


State 63

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 85


State 64

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 65

   41 simple_expression: ADDOP term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 73

    $default  reduce using rule 41 (simple_expression)


State 66

   51 factor: NOT factor .

    $default  reduce using rule 51 (factor)


State 67

   47 factor: ID '(' . expression_list ')'

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression_list    go to state 86
    expression         go to state 76
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 68

   46 factor: ID '[' . expression ']'

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 87
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 69

   50 factor: '(' expression . ')'

    ')'  shift, and go to state 88


State 70

   29 statement: IF expression THEN . statement ELSE statement
   30          | IF expression THEN . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    ID      shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 89
    variable             go to state 31
    procedure_statement  go to state 32


State 71

   39 expression: simple_expression RELOP . simple_expression

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    simple_expression  go to state 90
    term               go to state 51
    factor             go to state 52


State 72

   42 simple_expression: simple_expression ADDOP . term

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 48

    term    go to state 91
    factor  go to state 52


State 73

   44 term: term MULOP . factor

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 48

    factor  go to state 92


State 74

   31 statement: WHILE expression DO . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    ID      shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 93
    variable             go to state 31
    procedure_statement  go to state 32


State 75

   35 procedure_statement: ID '(' expression_list . ')'
   37 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 94
    ','  shift, and go to state 95


State 76

   36 expression_list: expression .

    $default  reduce using rule 36 (expression_list)


State 77

   33 variable: ID '[' expression . ']'

    ']'  shift, and go to state 96


State 78

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 79

   26 statement: variable ASSIGNOP expression .

    $default  reduce using rule 26 (statement)


State 80

    4 identifier_list: identifier_list . ',' ID
   19 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 97


State 81

   17 arguments: '(' parameter_list . ')'
   20 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 98
    ';'  shift, and go to state 99


State 82

   16 subprogram_head: PROCEDURE ID arguments ';' .

    $default  reduce using rule 16 (subprogram_head)


State 83

   15 subprogram_head: FUNCTION ID $@2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 100


State 84

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 85

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 101


State 86

   37 expression_list: expression_list . ',' expression
   47 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 102
    ','  shift, and go to state 95


State 87

   46 factor: ID '[' expression . ']'

    ']'  shift, and go to state 103


State 88

   50 factor: '(' expression ')' .

    $default  reduce using rule 50 (factor)


State 89

   29 statement: IF expression THEN statement . ELSE statement
   30          | IF expression THEN statement .

    ELSE  shift, and go to state 104

    ELSE      [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


State 90

   39 expression: simple_expression RELOP simple_expression .
   42 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 72

    $default  reduce using rule 39 (expression)


State 91

   42 simple_expression: simple_expression ADDOP term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 73

    $default  reduce using rule 42 (simple_expression)


State 92

   44 term: term MULOP factor .

    $default  reduce using rule 44 (term)


State 93

   31 statement: WHILE expression DO statement .

    $default  reduce using rule 31 (statement)


State 94

   35 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 35 (procedure_statement)


State 95

   37 expression_list: expression_list ',' . expression

    ADDOP  shift, and go to state 43
    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    '('    shift, and go to state 48

    expression         go to state 105
    simple_expression  go to state 50
    term               go to state 51
    factor             go to state 52


State 96

   33 variable: ID '[' expression ']' .

    $default  reduce using rule 33 (variable)


State 97

   19 parameter_list: identifier_list ':' . type

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    ARRAY    shift, and go to state 40

    type           go to state 106
    standard_type  go to state 42


State 98

   17 arguments: '(' parameter_list ')' .

    $default  reduce using rule 17 (arguments)


State 99

   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 107


State 100

   15 subprogram_head: FUNCTION ID $@2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standard_type  go to state 108


State 101

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 109


State 102

   47 factor: ID '(' expression_list ')' .

    $default  reduce using rule 47 (factor)


State 103

   46 factor: ID '[' expression ']' .

    $default  reduce using rule 46 (factor)


State 104

   29 statement: IF expression THEN statement ELSE . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    ID      shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 110
    variable             go to state 31
    procedure_statement  go to state 32


State 105

   37 expression_list: expression_list ',' expression .

    $default  reduce using rule 37 (expression_list)


State 106

   19 parameter_list: identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 107

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 111


State 108

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 112


State 109

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 113


State 110

   29 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 29 (statement)


State 111

   20 parameter_list: parameter_list ';' identifier_list ':' . type

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    ARRAY    shift, and go to state 40

    type           go to state 114
    standard_type  go to state 42


State 112

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


State 113

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 115


State 114

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 115

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standard_type  go to state 116


State 116

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
