Terminals unused in grammar

   EQ
   NE
   LT
   LE
   GT
   GE
   PLUS
   MINUS
   OR
   STAR
   SLASH
   AND


State 87 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    2 identifier_list: ID
    3                | identifier_list ',' ID

    4 declarations: declarations VAR identifier_list ':' type ';'
    5             | %empty

    6 type: standard_type
    7     | ARRAY '[' NUM DOTDOT NUM ']' OF standard_type

    8 standard_type: INTEGER
    9              | REAL

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   11                        | %empty

   12 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   13 subprogram_head: FUNCTION ID arguments ':' standard_type ';'
   14                | PROCEDURE ID arguments ';'

   15 arguments: '(' parameter_list ')'
   16          | %empty

   17 parameter_list: identifier_list ':' type
   18               | parameter_list ';' identifier_list ':' type

   19 compound_statement: BBEGIN optional_statements END

   20 optional_statements: statement_list
   21                    | %empty

   22 statement_list: statement
   23               | statement_list ';' statement

   24 statement: variable ASSIGNOP expression
   25          | procedure_statement
   26          | compound_statement
   27          | IF expression THEN statement ELSE statement
   28          | IF expression THEN statement
   29          | WHILE expression DO statement

   30 variable: ID
   31         | ID '[' expression ']'

   32 procedure_statement: ID
   33                    | ID '(' expression_list ')'

   34 expression_list: expression
   35                | expression_list ',' expression

   36 expression: simple_expression
   37           | simple_expression RELOP simple_expression

   38 simple_expression: term
   39                  | sign term
   40                  | simple_expression ADDOP term

   41 term: factor
   42     | term MULOP factor

   43 factor: ID
   44       | ID '(' expression_list ')'
   45       | NUM
   46       | '(' expression ')'
   47       | NOT factor

   48 sign: '+'
   49     | '-'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 15 33 44 46
')' (41) 1 15 33 44 46
'+' (43) 48
',' (44) 3 35
'-' (45) 49
'.' (46) 1
':' (58) 4 13 17 18
';' (59) 1 4 10 13 14 18 23
'[' (91) 7 31
']' (93) 7 31
error (256)
PROGRAM (258) 1
BBEGIN (259) 19
END (260) 19
VAR (261) 4
PROCEDURE (262) 14
FUNCTION (263) 13
INTEGER (264) 8
REAL (265) 9
ARRAY (266) 7
OF (267) 7
IF (268) 27 28
THEN (269) 27 28
ELSE (270) 27
WHILE (271) 29
DO (272) 29
ASSIGNOP (273) 24
RELOP (274) 37
EQ (275)
NE (276)
LT (277)
LE (278)
GT (279)
GE (280)
ADDOP (281) 40
PLUS (282)
MINUS (283)
OR (284)
MULOP (285) 42
STAR (286)
SLASH (287)
AND (288)
NOT (289) 47
ID (290) 1 2 3 13 14 30 31 32 33 43 44
NUM (291) 7 45
DOTDOT (292) 7


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
identifier_list (50)
    on left: 2 3, on right: 1 3 4 17 18
declarations (51)
    on left: 4 5, on right: 1 4 12
type (52)
    on left: 6 7, on right: 4 17 18
standard_type (53)
    on left: 8 9, on right: 6 7 13
subprogram_declarations (54)
    on left: 10 11, on right: 1 10 12
subprogram_declaration (55)
    on left: 12, on right: 10
subprogram_head (56)
    on left: 13 14, on right: 12
arguments (57)
    on left: 15 16, on right: 13 14
parameter_list (58)
    on left: 17 18, on right: 15 18
compound_statement (59)
    on left: 19, on right: 1 12 26
optional_statements (60)
    on left: 20 21, on right: 19
statement_list (61)
    on left: 22 23, on right: 20 23
statement (62)
    on left: 24 25 26 27 28 29, on right: 22 23 27 28 29
variable (63)
    on left: 30 31, on right: 24
procedure_statement (64)
    on left: 32 33, on right: 25
expression_list (65)
    on left: 34 35, on right: 33 35 44
expression (66)
    on left: 36 37, on right: 24 27 28 29 31 34 35 46
simple_expression (67)
    on left: 38 39 40, on right: 36 37 40
term (68)
    on left: 41 42, on right: 38 39 40 42
factor (69)
    on left: 43 44 45 46 47, on right: 41 42 47
sign (70)
    on left: 48 49, on right: 39


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: ID .

    $default  reduce using rule 2 (identifier_list)


State 7

    1 program: PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    3 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    3 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 11


State 10

    1 program: PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 3 (identifier_list)


State 12

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    4 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    4 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 15


State 14

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   10 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN     shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    FUNCTION   shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 21


State 15

    3 identifier_list: identifier_list . ',' ID
    4 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 22


State 16

   19 compound_statement: BBEGIN . optional_statements END

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    ID      shift, and go to state 25

    $default  reduce using rule 21 (optional_statements)

    compound_statement   go to state 26
    optional_statements  go to state 27
    statement_list       go to state 28
    statement            go to state 29
    variable             go to state 30
    procedure_statement  go to state 31


State 17

   14 subprogram_head: PROCEDURE . ID arguments ';'

    ID  shift, and go to state 32


State 18

   13 subprogram_head: FUNCTION . ID arguments ':' standard_type ';'

    ID  shift, and go to state 33


State 19

   10 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 34


State 20

   12 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 35


State 21

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 36


State 22

    4 declarations: declarations VAR identifier_list ':' . type ';'

    INTEGER  shift, and go to state 37
    REAL     shift, and go to state 38
    ARRAY    shift, and go to state 39

    type           go to state 40
    standard_type  go to state 41


State 23

   27 statement: IF . expression THEN statement ELSE statement
   28          | IF . expression THEN statement

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression         go to state 48
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 24

   29 statement: WHILE . expression DO statement

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression         go to state 53
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 25

   30 variable: ID .
   31         | ID . '[' expression ']'
   32 procedure_statement: ID .
   33                    | ID . '(' expression_list ')'

    '('  shift, and go to state 54
    '['  shift, and go to state 55

    ASSIGNOP  reduce using rule 30 (variable)
    $default  reduce using rule 32 (procedure_statement)


State 26

   26 statement: compound_statement .

    $default  reduce using rule 26 (statement)


State 27

   19 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 56


State 28

   20 optional_statements: statement_list .
   23 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 57

    $default  reduce using rule 20 (optional_statements)


State 29

   22 statement_list: statement .

    $default  reduce using rule 22 (statement_list)


State 30

   24 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 58


State 31

   25 statement: procedure_statement .

    $default  reduce using rule 25 (statement)


State 32

   14 subprogram_head: PROCEDURE ID . arguments ';'

    '('  shift, and go to state 59

    $default  reduce using rule 16 (arguments)

    arguments  go to state 60


State 33

   13 subprogram_head: FUNCTION ID . arguments ':' standard_type ';'

    '('  shift, and go to state 59

    $default  reduce using rule 16 (arguments)

    arguments  go to state 61


State 34

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 10 (subprogram_declarations)


State 35

    4 declarations: declarations . VAR identifier_list ':' type ';'
   12 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogram_declarations)

    subprogram_declarations  go to state 62


State 36

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 1 (program)


State 37

    8 standard_type: INTEGER .

    $default  reduce using rule 8 (standard_type)


State 38

    9 standard_type: REAL .

    $default  reduce using rule 9 (standard_type)


State 39

    7 type: ARRAY . '[' NUM DOTDOT NUM ']' OF standard_type

    '['  shift, and go to state 63


State 40

    4 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 64


State 41

    6 type: standard_type .

    $default  reduce using rule 6 (type)


State 42

   47 factor: NOT . factor

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45

    factor  go to state 65


State 43

   43 factor: ID .
   44       | ID . '(' expression_list ')'

    '('  shift, and go to state 66

    $default  reduce using rule 43 (factor)


State 44

   45 factor: NUM .

    $default  reduce using rule 45 (factor)


State 45

   46 factor: '(' . expression ')'

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression         go to state 67
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 46

   48 sign: '+' .

    $default  reduce using rule 48 (sign)


State 47

   49 sign: '-' .

    $default  reduce using rule 49 (sign)


State 48

   27 statement: IF expression . THEN statement ELSE statement
   28          | IF expression . THEN statement

    THEN  shift, and go to state 68


State 49

   36 expression: simple_expression .
   37           | simple_expression . RELOP simple_expression
   40 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 69
    ADDOP  shift, and go to state 70

    $default  reduce using rule 36 (expression)


State 50

   38 simple_expression: term .
   42 term: term . MULOP factor

    MULOP  shift, and go to state 71

    $default  reduce using rule 38 (simple_expression)


State 51

   41 term: factor .

    $default  reduce using rule 41 (term)


State 52

   39 simple_expression: sign . term

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45

    term    go to state 72
    factor  go to state 51


State 53

   29 statement: WHILE expression . DO statement

    DO  shift, and go to state 73


State 54

   33 procedure_statement: ID '(' . expression_list ')'

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression_list    go to state 74
    expression         go to state 75
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 55

   31 variable: ID '[' . expression ']'

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression         go to state 76
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 56

   19 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 19 (compound_statement)


State 57

   23 statement_list: statement_list ';' . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    ID      shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 77
    variable             go to state 30
    procedure_statement  go to state 31


State 58

   24 statement: variable ASSIGNOP . expression

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression         go to state 78
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 59

   15 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 79
    parameter_list   go to state 80


State 60

   14 subprogram_head: PROCEDURE ID arguments . ';'

    ';'  shift, and go to state 81


State 61

   13 subprogram_head: FUNCTION ID arguments . ':' standard_type ';'

    ':'  shift, and go to state 82


State 62

   10 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   12 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    BBEGIN     shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    FUNCTION   shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 83


State 63

    7 type: ARRAY '[' . NUM DOTDOT NUM ']' OF standard_type

    NUM  shift, and go to state 84


State 64

    4 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 4 (declarations)


State 65

   47 factor: NOT factor .

    $default  reduce using rule 47 (factor)


State 66

   44 factor: ID '(' . expression_list ')'

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression_list    go to state 85
    expression         go to state 75
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 67

   46 factor: '(' expression . ')'

    ')'  shift, and go to state 86


State 68

   27 statement: IF expression THEN . statement ELSE statement
   28          | IF expression THEN . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    ID      shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 87
    variable             go to state 30
    procedure_statement  go to state 31


State 69

   37 expression: simple_expression RELOP . simple_expression

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    simple_expression  go to state 88
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 70

   40 simple_expression: simple_expression ADDOP . term

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45

    term    go to state 89
    factor  go to state 51


State 71

   42 term: term MULOP . factor

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45

    factor  go to state 90


State 72

   39 simple_expression: sign term .
   42 term: term . MULOP factor

    MULOP  shift, and go to state 71

    $default  reduce using rule 39 (simple_expression)


State 73

   29 statement: WHILE expression DO . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    ID      shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 91
    variable             go to state 30
    procedure_statement  go to state 31


State 74

   33 procedure_statement: ID '(' expression_list . ')'
   35 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 92
    ','  shift, and go to state 93


State 75

   34 expression_list: expression .

    $default  reduce using rule 34 (expression_list)


State 76

   31 variable: ID '[' expression . ']'

    ']'  shift, and go to state 94


State 77

   23 statement_list: statement_list ';' statement .

    $default  reduce using rule 23 (statement_list)


State 78

   24 statement: variable ASSIGNOP expression .

    $default  reduce using rule 24 (statement)


State 79

    3 identifier_list: identifier_list . ',' ID
   17 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 95


State 80

   15 arguments: '(' parameter_list . ')'
   18 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 96
    ';'  shift, and go to state 97


State 81

   14 subprogram_head: PROCEDURE ID arguments ';' .

    $default  reduce using rule 14 (subprogram_head)


State 82

   13 subprogram_head: FUNCTION ID arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 37
    REAL     shift, and go to state 38

    standard_type  go to state 98


State 83

   12 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 12 (subprogram_declaration)


State 84

    7 type: ARRAY '[' NUM . DOTDOT NUM ']' OF standard_type

    DOTDOT  shift, and go to state 99


State 85

   35 expression_list: expression_list . ',' expression
   44 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 100
    ','  shift, and go to state 93


State 86

   46 factor: '(' expression ')' .

    $default  reduce using rule 46 (factor)


State 87

   27 statement: IF expression THEN statement . ELSE statement
   28          | IF expression THEN statement .

    ELSE  shift, and go to state 101

    ELSE      [reduce using rule 28 (statement)]
    $default  reduce using rule 28 (statement)


State 88

   37 expression: simple_expression RELOP simple_expression .
   40 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 70

    $default  reduce using rule 37 (expression)


State 89

   40 simple_expression: simple_expression ADDOP term .
   42 term: term . MULOP factor

    MULOP  shift, and go to state 71

    $default  reduce using rule 40 (simple_expression)


State 90

   42 term: term MULOP factor .

    $default  reduce using rule 42 (term)


State 91

   29 statement: WHILE expression DO statement .

    $default  reduce using rule 29 (statement)


State 92

   33 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 33 (procedure_statement)


State 93

   35 expression_list: expression_list ',' . expression

    NOT  shift, and go to state 42
    ID   shift, and go to state 43
    NUM  shift, and go to state 44
    '('  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    expression         go to state 102
    simple_expression  go to state 49
    term               go to state 50
    factor             go to state 51
    sign               go to state 52


State 94

   31 variable: ID '[' expression ']' .

    $default  reduce using rule 31 (variable)


State 95

   17 parameter_list: identifier_list ':' . type

    INTEGER  shift, and go to state 37
    REAL     shift, and go to state 38
    ARRAY    shift, and go to state 39

    type           go to state 103
    standard_type  go to state 41


State 96

   15 arguments: '(' parameter_list ')' .

    $default  reduce using rule 15 (arguments)


State 97

   18 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 104


State 98

   13 subprogram_head: FUNCTION ID arguments ':' standard_type . ';'

    ';'  shift, and go to state 105


State 99

    7 type: ARRAY '[' NUM DOTDOT . NUM ']' OF standard_type

    NUM  shift, and go to state 106


State 100

   44 factor: ID '(' expression_list ')' .

    $default  reduce using rule 44 (factor)


State 101

   27 statement: IF expression THEN statement ELSE . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    ID      shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 107
    variable             go to state 30
    procedure_statement  go to state 31


State 102

   35 expression_list: expression_list ',' expression .

    $default  reduce using rule 35 (expression_list)


State 103

   17 parameter_list: identifier_list ':' type .

    $default  reduce using rule 17 (parameter_list)


State 104

    3 identifier_list: identifier_list . ',' ID
   18 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 108


State 105

   13 subprogram_head: FUNCTION ID arguments ':' standard_type ';' .

    $default  reduce using rule 13 (subprogram_head)


State 106

    7 type: ARRAY '[' NUM DOTDOT NUM . ']' OF standard_type

    ']'  shift, and go to state 109


State 107

   27 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 27 (statement)


State 108

   18 parameter_list: parameter_list ';' identifier_list ':' . type

    INTEGER  shift, and go to state 37
    REAL     shift, and go to state 38
    ARRAY    shift, and go to state 39

    type           go to state 110
    standard_type  go to state 41


State 109

    7 type: ARRAY '[' NUM DOTDOT NUM ']' . OF standard_type

    OF  shift, and go to state 111


State 110

   18 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 18 (parameter_list)


State 111

    7 type: ARRAY '[' NUM DOTDOT NUM ']' OF . standard_type

    INTEGER  shift, and go to state 37
    REAL     shift, and go to state 38

    standard_type  go to state 112


State 112

    7 type: ARRAY '[' NUM DOTDOT NUM ']' OF standard_type .

    $default  reduce using rule 7 (type)
